# Only use these if in an interactive prompt
case "$-" in *i*) ;; *) return ;; esac

# Dir navigation
alias ll="ls -alh"
function cd { builtin cd "$@" && ls; }
if type md | grep -q "alias" 2>/dev/null; then
  unalias md
fi
if type md | grep -q "function" 2>/dev/null; then
  unfunction md
fi
function md { mkdir -p $1 && cd $_ }
alias npmlib="cd $(npm config get prefix)/lib/node_modules && ll"


# Utilities
alias g="git"

## Vim helpers
alias v="mvim"
alias vim="mvim"
alias vdiff="mvim -d"
alias vimdiff="mvim -d"
alias vinstall="vim +PluginInstall +qall"

## ZSH helpers
alias zshreload="source ~/.zshrc"
alias zshconfig="v ~/.zshrc"

## File previews
alias c="bat"

## Better ping
alias ping='prettyping --nolegend'

## fzf (replacement for Ctrl+R
alias preview="fzf --preview 'bat --color \"always\" {}'"
# add support for ctrl+o to open selected file in VS Code
export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(code {})+abort'"

# Enhanced WHOIS lookups
alias whois="whois -h whois-servers.net"

# Recursively delete `.DS_Store` files
alias removeds="find . -name '*.DS_Store' -type f -ls -delete"


# Create a tmp working directory that is easy to get to
alias refreshtest="cd ~/Desktop; trash test; md test;"


# Development stuff
alias edithosts="sudo mvim /etc/hosts"


# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}"
  open "http://localhost:${port}/"
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
  python -m http.server "$port"
}


# Takes a top level directory and goes into each child running git rebase pull.
# I use it to update all my OSS projects at once
function gupfolder() {
  find . -type d -depth 1 -exec echo {} \; -exec git --git-dir={}/.git --work-tree=$(pwd)/{} pull --rebase upstream master \; -exec echo "done" \;
}


# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}


# get gzipped size
function gz() {
  echo "orig size    (bytes): "
  cat "$1" | wc -c
  echo "gzipped size (bytes): "
  gzip -c "$1" | wc -c
}
